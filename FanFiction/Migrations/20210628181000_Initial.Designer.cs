// <auto-generated />
using System;
using FanFiction.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FanFiction.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210628181000_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "6.0.0-preview.5.21301.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FanFiction.Data.Models.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Likes")
                        .HasColumnType("int")
                        .IsRequired();

                    b.Property<int>("SequentialNumber")
                        .HasColumnType("int")
                        .IsRequired();

                    b.Property<int?>("StoryId")
                        .HasColumnType("int")
                        .IsRequired();

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)")
                        .IsRequired();

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("StoryId");

                    b.ToTable("Chapter");
                });

            modelBuilder.Entity("FanFiction.Data.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("StoryId")
                        .HasColumnType("int")
                        .IsRequired();

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)")
                        .IsRequired();

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("StoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("FanFiction.Data.Models.Story", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Fandom")
                        .HasColumnType("nvarchar(max)")
                        .IsRequired();

                    b.Property<int>("Likes")
                        .HasColumnType("int")
                        .IsRequired();

                    b.Property<float>("Rating")
                        .HasColumnType("real")
                        .IsRequired();

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)")
                        .IsRequired();

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .IsRequired();

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Story");
                });

            modelBuilder.Entity("FanFiction.Data.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("FanFiction.Data.Models.TagForStory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("StoryId")
                        .HasColumnType("int")
                        .IsRequired();

                    b.Property<int?>("TagId")
                        .HasColumnType("int")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("StoryId");

                    b.HasIndex("TagId");

                    b.ToTable("TagForStory");
                });

            modelBuilder.Entity("FanFiction.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .IsRequired();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("FanFiction.Data.Models.Chapter", b =>
                {
                    b.HasOne("FanFiction.Data.Models.Story", "Story")
                        .WithMany()
                        .HasForeignKey("StoryId")
                        .IsRequired();

                    b.Navigation("Story");
                });

            modelBuilder.Entity("FanFiction.Data.Models.Comment", b =>
                {
                    b.HasOne("FanFiction.Data.Models.Story", "Story")
                        .WithMany()
                        .HasForeignKey("StoryId")
                        .IsRequired();

                    b.HasOne("FanFiction.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Story");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FanFiction.Data.Models.Story", b =>
                {
                    b.HasOne("FanFiction.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FanFiction.Data.Models.TagForStory", b =>
                {
                    b.HasOne("FanFiction.Data.Models.Story", "Story")
                        .WithMany()
                        .HasForeignKey("StoryId")
                        .IsRequired();

                    b.HasOne("FanFiction.Data.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .IsRequired();

                    b.Navigation("Story");

                    b.Navigation("Tag");
                });
#pragma warning restore 612, 618
        }
    }
}
